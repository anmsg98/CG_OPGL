#version 330
#define MAX_LIGHTS 8

in vec3 v_normal;
in vec2 v_texCoord;
in vec4 v_color;
in vec3 fragPos;

out vec4 gl_FragColor;

uniform vec3 lightColor[MAX_LIGHTS];
uniform vec3 lightPos[MAX_LIGHTS];
uniform vec3 ambientColor;
uniform vec3 viewPos;
uniform float ambientLight;
uniform int shine;
uniform vec3 spec;
uniform sampler2D texture1;
uniform int use_tex;
uniform int light_num;

void main(void)
{	
	vec4 result = vec4(0.0,0.0,0.0,0.0);
	vec3 ambient = clamp(ambientLight*ambientColor,0.0,1.0);
	
	for(int i=0;i<light_num;i++){
		vec3 normalVector = normalize(v_normal);
		vec3 lightDir = normalize(lightPos[i]-fragPos);
		float diffuseLight = max(dot(normalVector,lightDir),0.0); 
		vec3 diffuse = clamp(diffuseLight * lightColor[i],0.0,1.0);

		vec3 viewDir = normalize(viewPos-fragPos);
		vec3 reflectDir = reflect(-lightDir,normalVector);
		float specularLight = max(dot(viewDir,reflectDir),0.0);
		specularLight = pow(specularLight,shine);
		vec3 specular = clamp(specularLight*lightColor[i],0.0,1.0);

		result = result + vec4((diffuse*v_color.rgb+specular*spec), v_color.a );
	}
	//result = result/light_num; 최대밝기 제한시 해제
	result = result + vec4(ambient*v_color.rgb, v_color.a);
	if(use_tex==1){result = texture(texture1, v_texCoord) * result;}
	gl_FragColor = result;
}
